\documentclass[letterpaper]{article}
\usepackage{fullpage}
\addtolength{\hoffset}{-.5in}
\addtolength{\textwidth}{1in}
\addtolength{\voffset}{-.5in}
\addtolength{\textheight}{1in}
\begin{document}


<<startup, echo=FALSE, message=FALSE>>=
rm(list = ls())
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=100), options(width=80))
# knitr::opts_knit$set(out.format = "pdf_document")
# knitr::opts_knit$set(out.file = "file_b_dec.pdf")
# DCL e152 piloting. started 4 October 2022 by Jo Etzel
# fixed movie stat input files, 10 October 2022

library(RNifti)
library(stringr)
get.FTrz <- function(in.val) {
  return(.5 * log((1 + in.val) / (1 - in.val)))
} # Fisher's r-to-z transformation.
get.FTzr <- function(in.val) {
  return((exp(2 * in.val) - 1) / (exp(2 * in.val) + 1))
} # Fisher's z-to-r transformation

source("/data/nil-external/ccp/JosetAEtzel/DMCC_files/niftiPlottingFunctions.R");
# safety option
options(warnPartialMatchDollar = TRUE)

## ROOT directory and fixed variables
in.path <- "/data/nil-external/dcl/Events152_fMRI_NeuralMechanisms/voxelwiseAnalyses/"
# sub.ids <- c(paste0("0", 1:9), 11:31, 33:37);
# sub.ids <- c(paste0("0", 1:9), 11:47);
sub.ids <- c(paste0("0", 1:9), 12:47);
# sub.ids <- c("02", "33");
run.ids <- 1:4;
nframes <- c(405, 467, 404, 444);  # number of frames in each run, run.ids order
mov.ids <- c("1.2.3", "6.3.9", "3.1.3", "2.4.1");  # clip names in run.ids order; see analysisPrep.R

# ----------------------------------------------

## Feature-specific parameters can be changed here to switch between PE and visual features (e.g. pixel change mean)
# movie.features <- c("pe", "uncertainty")
movie.features <- c("sem", "coarse", "fine")
# movie.features <- c("pixel_change_mean", "pixel_change_var", "luminance_mean", "luminance_var")
# first and last TR of movie stat timeseries to correlate with parcel timeseries
first <- 1
last <- 550  # this number can exceed nframes, which is ok.
# input directory of the convoluted feature timeseries
in_feature_dir <- paste0(in.path, "movie_features/out_convo_segmentation/")
# in_feature_dir <- paste0(in.path, "movie_features/out_convo_visual/")

onset.tbl <- read.table(paste0(in.path, "subject_movie_onset/e152onsets.txt"));  # delay between first TR and movie onset, in sec
#  head(onset.tbl)
#   sub.id sub.lbl run1_1.2.3 run2_6.3.9 run3_3.1.3 run4_2.4.1
# 1 sub-01 e152003   7.900409   8.328984   7.929364   8.195244
# 2 sub-02 e152004   8.856364   8.909626   8.313563   8.564747
# feature.onsets <- c(6.16, 7.88, 5.52, 6.82) # in seconds, the delay between movie onset and PE onset.
feature.onsets <- c(0, 0, 0, 0) # in seconds, if we use visual movie.features such as pixel change, onset.tbl is enough, so set all to 0s here

# ----------------------------------------------

## Parcel-specific parameters
# last bit of the np2 input filenames: sub-01_run-1_np2_Sch400x7.txt
suff_sch_np2 <- "np2_Sch400x7";  
# last bit of the xcp input filenames: sub-01_run-1_schaefer400x7_ts.1D
suff_sch_xcp <- "schaefer400x7_ts";
# last bit of the np2 input filenames: sub-01_run-1_np2_subcortical.txt
suff_subcortical_np2 <- "np2_subcortical";  
# last bit of the np2 input filenames: sub-01_run-1_np2_subcortical.txt
suff_subcortical_xcp <- "TianSubcortexS2x3T_ts";  

TR <- 1.483;   # TR in seconds

# indexTable.csv is fetched from: https://github.com/PennLINC/xcpEngine/tree/master/atlas/TianSubcortexS2x3T and then modified to replace "-" with "_", avoiding R confusion (when reading the file, R will treat "-" as ".")
subcort.tbl <- read.csv(paste0(in.path, "atlas/indexTable.csv"), stringsAsFactors=FALSE);  
subcortical.ids <- subcort.tbl$node_label
subcortical_np2.tbl <- read.csv("/data/nil-bluearc/ccp-hcp/StroopCW/ATLASES/subcorticalKey.csv", stringsAsFactors=FALSE)
# join hemisphere and parcel name, e.g. "L, amygdala -> LH_amygdala" (consistent with Tian and Schaefer naming convention)
subcortical_np2.ids <- paste0(subcortical_np2.tbl$hemisphere, "H_", subcortical_np2.tbl$parcel.label)
# read node labels from the Schaefer2018_400x7 parcellation, fetched from: https://raw.githubusercontent.com/ThomasYeoLab/CBIG/master/stable_projects/brain_parcellation/Schaefer2018_LocalGlobal/Parcellations/HCP/fslr32k/cifti/Schaefer2018_400Parcels_7Networks_order_info.txt
# read a text file, each line is a node label
sch.tbl <- read.csv(paste0(in.path, "atlas/schaefer400x7NodeNames_updated.txt"), stringsAsFactors=FALSE, header=FALSE);
sch.ids <- sch.tbl[1:400, ];   # Schaefer2018_400x7 parcellation

# change preprocessing type, either xcp_36p_despike, xcp_24p_gsr, xcp_24p or np2
preproc <- "xcp_24p_gsr";
# preproc <- "xcp_24p";
# preproc <- "np2";
cat(paste("\n\nPreprocessed Data from", preproc, "\n\n"))

# output directory for correlation between feature timeseries and parcel timeseries, depending on feature type and parcel type
if ("pixel_change_mean" %in% movie.features) {
  out_corr_dir <- paste0(in.path, "feature_parcel_correlation/pcm_", preproc, "_corrs_", first, "_", last, "/")
} else {
  out_corr_dir <- paste0(in.path, "feature_parcel_correlation/seg_", preproc, "_corrs_", first, "_", last, "/")
}


# out_corr_dir <- paste0(in.path, "knitr_tan/median_correlation_with_shifts/visual_xcp_corrs_", first, "_", last, "/")
# check if out_corr_dir exists
if (!file.exists(out_corr_dir)) {
  dir.create(out_corr_dir)
}

# ----------------------------------------------

## Brain plotting parameters
under.img <- readNifti(paste0(in.path, "atlas/HCP_S1200T1w_94x111x94.nii.gz")); # made in analysisPrep.R
sch.img <- readNifti(paste0(in.path, "atlas/Schaefer2018_400x7_94x111x94.nii.gz"));
sub.img <- readNifti(paste0(in.path, "atlas/TianSubcortexS2x3TMNI_94x111x94.nii.gz"));
plot.slices <- round(seq(from=27, to=72, length.out=10));   # slices to show in the brain plots
# for median/mean metrics, the range can be small, like -.05 to .2, but for individual subjects, we'd want a bigger range, like -.1 to .5
nlims <- c(-0.5, -0.1)
plims <- c(0.1, 0.5)   # used in the brain-plotting code, too.
# nlims <- c(-0.2, -0.03)
# plims <- c(0.03, 0.2)   # used in the brain-plotting code, too.

# ----------------------------------------------

## Define plotting and correlation functions
read.xcp.schaefer <- function(sid, rid) {
  fname <- paste0(in.path, "parcel_timeseries/", preproc, "/XCP_OUTPUT_", sid, "/sub-", sid, "/run-", rid, "/fcon/schaefer400x7/sub-", sid, "_run-", rid, "_", suff_sch_xcp, ".1D")
  if (file.exists(fname)) {
    xcp.tbl <- read.delim(fname, header=FALSE, sep=" ")
    # check if any column if xcp.tbl have all values equal to 0
    if (any(apply(xcp.tbl, 2, function(x) all(x==0)))) { 
      stop(paste("all 0s in xcp.tbl for at least 1 parcel for subject", sid, "run", rid)) 
      }
    if (nrow(xcp.tbl) != nframes[rid] || ncol(xcp.tbl) != length(sch.ids)) { 
      stop("wrong xcp.tbl")
      }
    return(xcp.tbl)
  } else { 
    msg <- paste("missing", fname)
    stop(msg)
  }
}

read.xcp.subcortical <- function(sid, rid) {
  fname <- paste0(in.path, "parcel_timeseries/", preproc, "/XCP_OUTPUT_", sid, "/sub-", sid, "/run-", rid, "/fcon/TianSubcortexS2x3T/sub-", sid, "_run-", rid, "_", suff_subcortical_xcp, ".1D")
  if (file.exists(fname)) {
    xcp.tbl <- read.delim(fname, header=FALSE, sep=" ")
    # check if any column if xcp.tbl have all values equal to 0
    if (any(apply(xcp.tbl, 2, function(x) all(x==0)))) { 
      stop(paste("all 0s in xcp.tbl for at least 1 parcel for subject", sid, "run", rid)) 
      }
    if (nrow(xcp.tbl) != nframes[rid] || ncol(xcp.tbl) != length(subcortical.ids)) { 
      stop("wrong xcp.tbl")
      }
    return(xcp.tbl)
  } else { 
    msg <- paste("missing", fname)
    stop(msg)
  }
}

read.np2.schaefer <- function(sid, rid) {
  # fname <- paste0(in.path, "np2/sub-", sid, "_run-", rid, "_", suff_sch_np2, ".txt")
  fname <- paste0(in.path, "parcel_timeseries/", preproc, "/sub-", sid, "_run-", rid, "_", suff_sch_np2, ".txt")
  if (file.exists(fname)) {
    np2.tbl <- read.delim(fname)
    np2.tbl <- np2.tbl[, -c(1, 2)]  # remove the first two label columns
    # check if any column if np2.tbl have all values equal to 0
    if (any(apply(np2.tbl, 2, function(x) all(x==0)))) { 
      stop(paste("all 0s in np2.tbl for at least 1 parcel for subject", sid, "run", rid)) 
      }
    if (nrow(np2.tbl) != nframes[rid] || ncol(np2.tbl) != length(sch.ids)) { 
      stop(paste("wrong np2.tbl", nrow(np2.tbl), "!=", nframes[rid], "||", ncol(np2.tbl), "!=", length(sch.ids)))
      }
    return(np2.tbl)
  } else { 
    msg <- paste("missing", fname)
    stop(msg)
  }
}

read.np2.subcortical <- function(sid, rid) {
  # fname <- paste0(in.path, "np2/sub-", sid, "_run-", rid, "_", suff_sch_np2, ".txt")
  fname <- paste0(in.path, "parcel_timeseries/", preproc, "/sub-", sid, "_run-", rid, "_", suff_subcortical_np2, ".txt")
  if (file.exists(fname)) {
    np2.tbl <- read.delim(fname)
    np2.tbl <- np2.tbl[, -c(1, 2)]  # remove the first two label columns
    # check if any column if np2.tbl have all values equal to 0
    if (any(apply(np2.tbl, 2, function(x) all(x==0)))) { 
      stop(paste("all 0s in np2.tbl for at least 1 parcel for subject", sid, "run", rid)) 
      }
    if (nrow(np2.tbl) != nframes[rid] || ncol(np2.tbl) != length(subcortical_np2.ids)) { 
      stop(paste("wrong np2.tbl", nrow(np2.tbl), "!=", nframes[rid], "||", ncol(np2.tbl), "!=", length(subcortical_np2.ids)))
      }
    return(np2.tbl)
  } else { 
    msg <- paste("missing", fname)
    stop(msg)
  }
}

trim.sub.onset <- function(parcel.tbl, sid, rid) {
  ## fMRI frames were obtained before the movie started, so we need to trim the first few frames
  sub.onset <- onset.tbl[which(onset.tbl$sub.id == paste0("sub-", sid)), paste0("run", rid, "_", mov.ids[rid])]; # onset in seconds
  sub.onset <- sub.onset + feature.onsets[rid];  # if not a visual feature, how much time between movie start and PE start
  TR.onset <- round(sub.onset/TR) + 1;   # onset, in TR    
  # TR.onset <- ceiling(sub.onset/TR) + 1;   # onset, in TR    
  # return trimmed parcel.tbl
  return(parcel.tbl[(TR.onset:nframes[rid]), ])
}

slice.then.correlate <- function(parcel.tbl, movie.vec, p.ids, from_TR, to_TR) {
  ## temporally slice the movie feature vector and the parcel BOLD time series, depending on the interval of interest (from_TR -> to_TR) in the movie
  movie.vec.sliced <- movie.vec
  # movie.vec is a vector, so nrow(movie.vec) return NULL, use length instead.
  movie.vec.sliced <- movie.vec.sliced[from_TR: min(to_TR, length(movie.vec.sliced))] # trim off the movie

  # nrow is #frames, ncol is #parcels
  TR.indices.sliced <- (from_TR):nrow(parcel.tbl) # #frames recorded in this session (a specific subject with a specific movie)

  if (length(TR.indices.sliced) < length(movie.vec.sliced)) {
    movie.vec.sliced <- movie.vec.sliced[1:length(TR.indices.sliced)]
  }
  if (length(movie.vec.sliced) < length(TR.indices.sliced)) {
    TR.indices.sliced <- TR.indices.sliced[1:length(movie.vec.sliced)]
  }

  ## correlate the aligned movie feature vector and the aligned parcel BOLD time series
  corrs <- array(NA, length(p.ids))
  for (i in 1:length(p.ids)) {
    corr <- cor(parcel.tbl[TR.indices.sliced, p.ids[i]], movie.vec.sliced, method = "pearson")
    # check if corr is NA
    if (is.na(corr)) {
      print("corr is NA, check values below for clues")
      print(paste0("TR.indices.sliced=", length(TR.indices.sliced), " movie.vec.sliced=", length(movie.vec.sliced)))
    }
    corrs[i] <- corr
  }
  return(corrs)
}

# This function load the parcel-feature correlations and plot correlation for each subject, movie, and feature
just.plot.subject <- function(do.col, rid, sid) {
  # do.col <- "pe"; rid <- 1; sid <- 1
  # print(paste(do.col, " run", mov.ids[rid], "at various starts (starts in TR)"));
  temp.img <- array(0, dim(under.img))
  # reference how correlation tables are saved
  # e.g. fname.out <- paste0(out_corr_dir, preproc, "Corrs_", do.col, "_run", rid, "_sch.txt")
  prefix <- paste0(out_corr_dir, preproc, "Corrs_", do.col, "_run", rid)

  for (do.par in c("Schaefer2018_400x7", "subcortical")) {
    # specify parcel ids, parcel-pe correlations, and "under" img to plot (Schaefer or subcortical)
    if (do.par == "Schaefer2018_400x7") {
      p.ids <- sch.ids
      p.img <- sch.img
      fname <- paste0(prefix, "_sch.txt")
      cor.tbl <- read.table(fname)
    }
    if (do.par == "subcortical") {
      p.ids <- subcortical.ids
      p.img <- sub.img
      fname <- paste0(prefix, "_subcortical.txt")
      cor.tbl <- read.table(fname)
    }
    
    # sid_str <- "01";
    sid_str <- str_pad(sid, width = 2, pad = "0")
    # use 1:length(p.ids) because parcel ids for subcortical is 1:32 (for Tian) and 1:400 (for Schaefer)
    for (pid in 1:length(p.ids)) {
    # for (pid in p.ids) {
      # val <- cor.tbl[which(cor.tbl$sub.id == paste0("sub-", sid_str)), paste0("p", pid)];
      val <- cor.tbl[which(cor.tbl$sub.id == paste0("sub-", sid_str)), p.ids[pid]];
      temp.img[which(p.img == pid)] <- val
    }
  }
  plot.volume(temp.img, under.img, neg.lims = nlims, pos.lims = plims, ttl = paste0(mov.ids[rid], do.col))
}

# This function load the parcel-feature correlations and plot correlation for each subject, movie, and feature
just.plot.median <- function(do.col, rid) {
  # do.col <- "pe"; rid <- 1
  # print(paste(do.col, " run", mov.ids[rid], "at various starts (starts in TR)"));
  temp.img <- array(0, dim(under.img))
  # reference how correlation tables are saved
  # e.g. fname.out <- paste0(out_corr_dir, preproc, "Corrs_", do.col, "_run", rid, "_sch.txt")
  prefix <- paste0(out_corr_dir, preproc, "Corrs_", do.col, "_run", rid)

  for (do.par in c("Schaefer2018_400x7", "subcortical")) {
    # specify parcel ids, parcel-pe correlations, and "under" img to plot (Schaefer or subcortical)
    if (do.par == "Schaefer2018_400x7") {
      p.ids <- sch.ids # 1:400
      p.img <- sch.img
      fname <- paste0(prefix, "_sch.txt")
      # print(paste("Loading", fname));
      cor.tbl <- read.table(fname)
    }
    if (do.par == "subcortical") {
      p.ids <- subcortical.ids
      p.img <- sub.img
      fname <- paste0(prefix, "_subcortical.txt")
      cor.tbl <- read.table(fname)
    }
    
    # use 1:length(p.ids) because parcel ids for subcortical is 1:32 (for Tian) and 1:400 (for Schaefer)
    for (pid in 1:length(p.ids)) {
    # for (pid in p.ids) {
      # vals <- cor.tbl[, paste0("p", pid)];
      vals <- cor.tbl[, p.ids[pid]]; ## p.ids[pid] = aHIP-rh or RH_Default_PCC_4
      # get median of vals
      val <- median(vals, na.rm = TRUE)
      # print(val)
      temp.img[which(p.img == pid)] <- val
    }
  }
  plot.volume(temp.img, under.img, neg.lims = nlims, pos.lims = plims, ttl = paste0(mov.ids[rid], do.col))
}
@

\noindent compiled \today\  \par
\noindent DCL events152 positive controls, with matlab convolution and downsampling. \par
\noindent files under \texttt{/data/nil-external/dcl/Events152\textunderscore fMRI\textunderscore NeuralMechanisms/voxelwiseAnalyses/} \par
\vspace{0.2 cm} 
\noindent 47 people watched movies in four fMRI runs; everyone watched the same movie in each run (four different movies total; same order for everyone). Images were preprocessed with fmriprep (volumes only), then np2 detrended and normalized, and parcel-averaged using the Schaefer2018 400x7 parcellation (\texttt{analysisPrep.R}), then XCP engine (24p, w/o gsr). The runs had the same number of volumes for everyone but the movie onsets varied a bit (7.9 to 11.4 seconds); see \texttt{e152onsets.txt} and \texttt{getOnsets.R}. \par
\vspace{0.2 cm}
\noindent Tan Nguyen created the files with PE and Uncertainty statistics experienced by SEM model for each frame of each movie. These stats are every 0.333 seconds, much faster than the BOLD or the TR (1.483 sec). These stats were convolved and downsampled by running \texttt{convo\textunderscore seg\textunderscore trigger.m} \par
\noindent Dec 31 2023, Tan Nguyen created the files with SEM and human fine and coarse boundary probabilities for each frame of each movie. These stats are also every 0.333 seconds, much faster than the BOLD or the TR (1.483 sec). These stats were convolved and downsampled by running \texttt{convo\textunderscore seg\textunderscore trigger.m} \par
\vspace{0.2 cm}
\noindent Aligning the movie and BOLD timeseries properly before correlating has been a challenge, but seems to be sorted now. The first section shows the median correlation for each movie statistic and run at offset 0. \par




\newpage
\noindent Correlation  \par
\vspace{0.2 cm} 
<<code2legend, echo=FALSE, dev='pdf', fig.height=0.3, fig.width=7.5, fig.align="center">>=
par(oma = rep(0.2, 4), mar = rep(0, 4), mgp = rep(0, 3))

#nlims <- c(-0.2,-0.05); plims <- c(0.05, 0.2);   # used in the brain-plotting code, too.

# blank plot
plot(x = 0, y = 0, xlim = c(-10, 131), type = "n", ylab = "", xlab = "", main = "", bty = "n", xaxt = "n", yaxt = "n")
for (i in 1:length(cols.warm)) {
  rect(xleft = 66 + i, xright = 67 + i, ybottom = -0.5, ytop = 0.5, col = cols.warm[i], border = cols.warm[i])
}
for (i in 1:length(cols.cool)) {
  rect(xleft = 53 - i, xright = 54 - i, ybottom = -0.5, ytop = 0.5, col = cols.cool[i], border = cols.cool[i])
}
text(x=-8, y=0, labels=nlims[1], adj=1, cex=0.7);   # adj=1 for right-justified text; adj=0 for left-justified
text(x=53.5, y=0, labels=nlims[2], adj=0, cex=0.7);
#text(x=60, y=0, labels=0, cex=0.8);
text(x=66, y=0, labels=plims[1], adj=1, cex=0.7);
text(x=128, y=0, labels=plims[2], adj=0, cex=0.7);

@
\vspace{0.2 cm}
<<code2, dev='pdf', cache=TRUE, echo=FALSE, fig.height=1, fig.width=8, fig.align='center'>>=

# calculate parcel-feature correlation and save into a table for each feature-movie.
# Note that there is no error catching here, so if one of the parcel timeseries is corrupted and cannot be read, the loop will break and there will not be timeseries to correlate (so there will be no *.txt in e.g. "seg_xcp_24p_corrs_1_550" ). This should inform you to go back and check results from XCP engine
for (do.col in movie.features) {
  for (rid in run.ids) {
    ## load the movie feature timeseries
    movie.vec <- read.csv(paste0(in_feature_dir, "conv_", mov.ids[rid], "_", do.col, "_dtFix.csv"), header = FALSE)
    movie.vec <- unlist(movie.vec[1, ], use.names = FALSE)

    for (do.par in c("Schaefer2018_400x7", "subcortical")) {
      ## correlate with xcp/np2 parcels and save to a table
      if (do.par == "Schaefer2018_400x7") {
        p.ids <- sch.ids
      } else if (do.par == "subcortical") {
        # if np2, then use subcortical_np2.ids, or else use subcortical.ids
        if (grepl('np2', preproc)) {
          p.ids <- subcortical_np2.ids
        } else {
          p.ids <- subcortical.ids
        }
      }
      out.tbl <- data.frame(array(NA, c(length(sub.ids), length(p.ids) + 1)))
      colnames(out.tbl) <- c("sub.id", p.ids)
      # colnames(out.tbl) <- c("sub.id", paste0("p", p.ids))
      for (i in 1:length(sub.ids)) {
        if (grepl("xcp", preproc)) {
          if (do.par == "Schaefer2018_400x7") {
            parcel.tbl <- read.xcp.schaefer(sub.ids[i], rid)
          }
          if (do.par == "subcortical") {
            parcel.tbl <- read.xcp.subcortical(sub.ids[i], rid)
          }
        } else if (grepl("np2", preproc)) {
          if (do.par == "Schaefer2018_400x7") {
            parcel.tbl <- read.np2.schaefer(sub.ids[i], rid)
          }
          if (do.par == "subcortical") {
            parcel.tbl <- read.np2.subcortical(sub.ids[i], rid)
            p.ids <- p.ids
          }
        } else {
          stop(paste("Error: unknown preproc, must be either xcp or np2, get: ", preproc))
        }
        parcel.tbl <- dplyr::tibble(parcel.tbl)
        colnames(parcel.tbl) <- p.ids
        # parcel.tbl <- read.xcp.schaefer(sub.ids[i], rid);
        parcel.tbl <- trim.sub.onset(parcel.tbl, sub.ids[i], rid)
        corrs <- slice.then.correlate(parcel.tbl, movie.vec, p.ids, from_TR = first, to_TR = last)
        out.tbl[i, 1] <- paste0("sub-", sub.ids[i])
        out.tbl[i, 2:(length(p.ids) + 1)] <- corrs
      }
      if (do.par == "Schaefer2018_400x7") {
        fname.out <- paste0(out_corr_dir, preproc, "Corrs_", do.col, "_run", rid, "_sch.txt")
      }
      if (do.par == "subcortical") {
        fname.out <- paste0(out_corr_dir, preproc, "Corrs_", do.col, "_run", rid, "_subcortical.txt")
      }
      # fname.out <- paste0(out_corr_dir, "xcpCorrs_", do.col, "_run", rid, "_sch.txt")
      write.table(out.tbl, fname.out)
    }
  }
}
# cat("Not calculating correlations, already have")

@

\newpage
\noindent Correlation  \par
\vspace{0.4 cm}

<<code4legend, echo=FALSE, dev='pdf', fig.height=0.3, fig.width=7.5, fig.align="center">>=
par(oma = rep(0.2, 4), mar = rep(0, 4), mgp = rep(0, 3))

# blank plot
plot(x = 0, y = 0, xlim = c(-10, 131), type = "n", ylab = "", xlab = "", main = "", bty = "n", xaxt = "n", yaxt = "n")
for (i in 1:length(cols.warm)) {
  rect(xleft = 66 + i, xright = 67 + i, ybottom = -0.5, ytop = 0.5, col = cols.warm[i], border = cols.warm[i])
}
for (i in 1:length(cols.cool)) {
  rect(xleft = 53 - i, xright = 54 - i, ybottom = -0.5, ytop = 0.5, col = cols.cool[i], border = cols.cool[i])
}
text(x=-8, y=0, labels=nlims[1], adj=1, cex=0.7)   # adj=1 for right-justified text; adj=0 for left-justified
text(x=53.5, y=0, labels=nlims[2], adj=0, cex=0.7)
#text(x=60, y=0, labels=0, cex=0.8);
text(x=66, y=0, labels=plims[1], adj=1, cex=0.7)
text(x=128, y=0, labels=plims[2], adj=0, cex=0.7)

@

\vspace{0.2 cm}


<<code4, dev='pdf', cache=TRUE, echo=FALSE, fig.height=1, fig.width=8, fig.align='center', results='asis', eval=TRUE>>=
# https://bookdown.org/yihui/rmarkdown-cookbook/results-asis.html: By default, text output from code chunks will be written out verbatim with two leading hashes (see Section 11.12). The text is verbatim because knitr puts it in fenced code blocks (```). If you do not want the text to be in a fenced code block (or the leading hashes), you can set the chunk option results='asis'. This is useful to programmatically break pages using cat("\n\\newpage\n"). However, it will break other printing functions, either cat or print, if the string contain "LaTEX" characters such as \ or _ (e.g. pixel_change_mean). Notice, \n will break print but not cat because print also add quotes ("") and [1] in front of the string (e.g. [1] "haha"), and "\n is an incorrect syntax. If print is used, make sure there is no \n in the string.


# cat("\n\nGrouping by Movie")
# # grouping by movie
# for (do.col in movie.features) {
#   str <- paste("\n\ncalculate", do.col, "correlations with parcel timeseries")
#   # replace underscores with spaces
#   str <- gsub("_", " ", str)
#   cat(str)
#   for (rid in run.ids) {
#     for (sid in sub.ids) {
#       str <- paste("\n\nsubjects", sid, "run", mov.ids[rid])
#       str <- gsub("_", " ", str)
#       cat(str)
#       just.plot.subject(do.col=do.col, rid=rid, sid=sid)
#     }
#     cat("\n\\newpage\n")
#   }
# }

# cat("\n\nGrouping by Subject")
# # grouping by movie
# for (do.col in movie.features) {
#   str <- paste("\n\nplot", do.col, "correlations with parcel timeseries")
#   # replace underscores with spaces
#   str <- gsub("_", " ", str)
#   cat(str)
#   for (sid in sub.ids) {
#     cat(paste("\n\nsubject", sid, "the four runs"))
#     for (rid in run.ids) {
#       # str <- paste("\n\nsubjects", sid, "run", mov.ids[rid])
#       # str <- gsub("_", " ", str)
#       # cat(str)
#       just.plot.subject(do.col=do.col, rid=rid, sid=sid)
#     }
#     cat("\n\\newpage\n")
#   }
# }

for (do.col in movie.features) {
  str <- paste("\n\nplot", do.col, "median correlations with parcel timeseries")
  # replace underscores with spaces
  str <- gsub("_", " ", str)
  cat(str)
  for (rid in run.ids) {
    cat(paste("\n\nrun", mov.ids[rid]))
    just.plot.median(do.col = do.col, rid = rid)
  }
  cat("\n\\newpage\n")
}
@


\end{document}